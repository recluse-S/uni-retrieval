<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.retrieval.Mapper.IRMapper">

    <select id="getFirstSub" resultType="com.retrieval.pojo.MajorPro">
        SELECT major, id FROM major_pro;
    </select>

    <select id="getSecondSub" resultType="com.retrieval.pojo.MajorSecondary">
        SELECT id, major, academic, father
        FROM major_secondary
        WHERE father = #{id}  AND academic = #{academic}
    </select>

    <select id="getThirdlySub" resultType="com.retrieval.pojo.MajorPrimary">
        SELECT major, id FROM major_primary WHERE father = #{father};
    </select>

    <select id="getAllMajors" resultType="com.retrieval.pojo.MajorPrimary">
        SELECT major, id FROM major_primary;
    </select>

    <select id="recommend" resultType="com.retrieval.pojo.Vo.UniVo">
        SELECT f.id, f.institution, f.req_education, f.req_degree, f.req_major_graduate, f.location, f.recruiting_num,
               f.post_grade, f.post_category, f.post_name, f.post_statement, f.release_time, f.created_time, f.view, f.gen_regulation
        FROM
            `form` f
		LEFT JOIN
            general_regulations g ON f.gen_regulation = g.id
        WHERE f.release_time >= NOW() - INTERVAL 20 DAY AND g.hot != 1
        ORDER BY f.release_time DESC;
    </select>

    <select id="getAmount" resultType="integer">
        SELECT amount FROM payments WHERE id = 1
    </select>

    <select id="getHotId" resultType="integer">
        SELECT id
        FROM general_regulations
        WHERE hot = 1
    </select>

    <select id="getHot" resultType="com.retrieval.pojo.Vo.UniVo">
        SELECT id, institution, req_education, req_degree, req_major_graduate, location, recruiting_num,
               post_grade, post_category, post_name, post_statement, release_time, created_time, view, gen_regulation
        FROM `form`
        WHERE gen_regulation = #{hotId}
    </select>

    <select id="getHots" resultType="com.retrieval.pojo.Vo.UniVo">
        SELECT f.id, f.institution, f.req_education, f.req_degree, f.req_major_graduate, f.location, f.recruiting_num,
               f.post_grade, f.post_category, f.post_name, f.post_statement, f.release_time, f.created_time, f.view, f.gen_regulation
        FROM
            `form` f
		LEFT JOIN
            general_regulations g ON f.gen_regulation = g.id
        WHERE g.hot = 1
        ORDER BY f.release_time DESC;
    </select>

    <update id="incrementView">
        UPDATE form SET view = view + 1 WHERE id = #{id}
    </update>

    <insert id="addView" parameterType="com.retrieval.pojo.View">
        INSERT INTO `view` (user_id, form_id, created_time) VALUES (#{userId}, #{id}, NOW());
    </insert>

    <select id="getResult" resultType="com.retrieval.pojo.Vo.UniVo">
        SELECT id, institution, req_education, req_degree, req_major_graduate, location, recruiting_num,
        post_grade, post_category, post_name, post_statement, release_time, created_time, `view`, gen_regulation
        FROM `form`
        <where>
            <if test="input != null and input != '' ">
                AND (
                institution LIKE CONCAT('%', #{input}, '%')
                )
            </if>
            <if test="req != null and req != '' ">
                <choose>
                    <when test="req == '本科'">
                        AND req_education REGEXP CONCAT('.*', '本科', '.*')
                    </when>
                    <when test="req == '硕士'">
                        AND (req_education REGEXP CONCAT('.*', '本科', '.*') OR req_degree REGEXP CONCAT('.*', '硕士', '.*'))
                    </when>
                    <when test="req == '博士'">
                        AND req_degree REGEXP CONCAT('.*', '博士', '.*')
                    </when>
                </choose>
            </if>
            <if test="location != null and location != '' ">
                AND location LIKE CONCAT('%', #{location}, '%')
            </if>
            <if test="isUnder != null and isUnder != '' ">
                AND nature_unit LIKE CONCAT('%', #{isUnder}, '%')
            </if>
            <if test="remark != null and remark != '' ">
                AND education_level LIKE CONCAT('%', #{remark}, '%')
            </if>
            <if test="postGrade != null and postGrade != '' ">
                AND post_grade LIKE CONCAT('%', #{postGrade}, '%')
            </if>
            <if test="releaseTime != null and releaseTime != '' ">
                <choose>
                    <when test="releaseTime == '考试动态'">
                        AND release_time LIKE CONCAT('%', '*', '%')
                    </when>
                    <when test="releaseTime != '考试动态'">
                        AND release_time LIKE CONCAT('%', #{releaseTime}, '%')
                    </when>
                </choose>
            </if>
            <if test="postName != null and postName != '' ">
                <choose>
                    <when test="postName == '教师岗'">
                        AND post_name REGEXP CONCAT('.*', '教师', '.*')
                    </when>
                    <when test="postName == '辅导员岗'">
                        AND post_name REGEXP CONCAT('.*', '辅导员', '.*')
                    </when>
                    <when test="postName == '人才引进'">
                        AND post_name REGEXP CONCAT('.*', '人才引进', '.*')
                    </when>
                    <when test="postName == '其他岗'">
                        AND post_name NOT REGEXP CONCAT('.*', '教师', '.*')
                        AND post_name NOT REGEXP CONCAT('.*', '辅导员', '.*')
                        AND post_name NOT REGEXP CONCAT('.*', '人才引进', '.*')
                    </when>
                </choose>
            </if>
            <!-- 处理 major 参数 -->
<!--            <if test="major != null and major.size() > 0">-->
<!--                AND (-->
<!--                <foreach collection="major" item="item" separator="OR">-->
<!--                    req_major_graduate LIKE CONCAT('%',-->
<!--                    IF(INSTR(#{item}, '（') > 0,-->
<!--                    REPLACE(SUBSTRING(#{item}, 1, INSTR(#{item}, '（')), '（', ''),-->
<!--                    #{item}-->
<!--                    ),-->
<!--                    '%')-->
<!--                </foreach>-->
<!--                )-->
<!--            </if>-->
            <if test="major != null and major != '' ">
                AND (
                req_major_graduate LIKE CONCAT('%、', #{major}, '%') OR
                req_major_graduate LIKE CONCAT(#{major}, '、%') OR
                req_major_graduate LIKE CONCAT(#{major}, '(%') OR
                req_major_graduate LIKE CONCAT('%、', #{major}, '一级%') OR
                req_major_graduate LIKE CONCAT(#{major} , '一级%') OR
                req_major_graduate LIKE CONCAT('%、', #{major}, '类%') OR
                req_major_graduate LIKE CONCAT(#{major}, '类%') OR
                req_major_graduate LIKE CONCAT('%、', #{major}, '门类%') OR
                req_major_graduate LIKE CONCAT(#{major}, '门类%') OR
                req_major_graduate LIKE CONCAT(#{major}, '专业%') OR
                req_major_graduate = #{major}
                )
            </if>
        </where>
        ORDER BY release_time DESC
        <if test="pageSize != null and pageSize > 0">
            LIMIT #{pageSize} OFFSET 0
        </if>
    </select>

    <select id="getDetail" resultType="com.retrieval.pojo.Vo.DetailVo">
        SELECT
            f.*,
            COALESCE(g.text, '') AS text,
            g.link
        FROM
            form f
        LEFT JOIN
            general_regulations g ON f.gen_regulation = g.id
        WHERE
            f.id = #{id}
    </select>
    
    <select id="isTextExists" resultType="boolean">
        SELECT COUNT(*)
        FROM form f
        JOIN general_regulations g ON f.gen_regulation = g.id
        WHERE f.id = #{id} AND g.text IS NOT NULL
    </select>

    <select id="getDetailDynamic" resultType="com.retrieval.pojo.Vo.DetailVo">
        SELECT
        f.*,
        <if test="textExists">
            g.text
        </if>
        FROM
        form f
        LEFT JOIN
        general_regulations g ON f.gen_regulation = g.id
        WHERE
        f.id = #{id}
    </select>

    <select id="selectCount" resultType="java.lang.Long" parameterType="java.util.Map">
        SELECT COUNT(*)
        FROM like
        WHERE user_id = #{userId} AND form_id = #{formId}
    </select>

    <select id="getUserId" resultType="java.lang.Integer" parameterType="java.util.Map">
        SELECT id FROM `user` WHERE name = #{name}
    </select>

    <select id="isLiked" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM `like`
        WHERE user_id = #{userId} AND form_id = #{formId}
    </select>

    <insert id="like" parameterType="com.retrieval.pojo.Like">
        INSERT INTO `like` (user_id, form_id, created_time) VALUES (#{userId}, #{id}, NOW());
    </insert>

    <insert id="increaseVips">
        INSERT INTO vips (user_id, is_pay, create_time, wxpay_id) VALUES (#{userId}, 1, NOW(), #{tradeNo});
    </insert>

    <insert id="increaseVipsSucc">
        INSERT INTO vips (user_id, is_pay, create_time) VALUES (#{userId}, 2, NOW());
    </insert>

    <delete id="unLike" parameterType="com.retrieval.pojo.Like">
        DELETE FROM `like` WHERE user_id = #{userId} AND form_id = #{id};
    </delete>

    <delete id="deleteOldVips">
        DELETE FROM vips WHERE user_id = #{userId};
    </delete>

    <update id="deleteUsableTimes">
        UPDATE user
        SET usable_times = usable_times - 1
        WHERE id = #{userId}
    </update>

    <select id="getLike" resultType="com.retrieval.pojo.Vo.LikeVo">
        SELECT `like`.* ,
               `form`.institution ,`form`.post_name ,`form`.req_major_graduate,
               `form`.post_statement ,`form`.req_education ,`form`.req_degree
        FROM `like`
        INNER JOIN `form`
        ON `like`.form_id = `form`.id
        WHERE `like`.user_id = #{id}
        ORDER BY `like`.created_time DESC;
    </select>

    <select id="getAll" resultType="com.retrieval.pojo.Vo.UniVo">
        SELECT id ,institution ,post_name ,post_statement ,req_education ,req_degree ,req_major_graduate, location
        FROM `form`
    </select>

    <select id="allSelect" resultType="string">
        SELECT major FROM `major_primary` WHERE father IN (
            SELECT id FROM `major_secondary` WHERE father = #{code} AND academic = #{academic}
        )
    </select>

    <select id="getAllInUniversity" resultType="com.retrieval.pojo.UniRetrieval">
        SELECT * FROM `form` WHERE institution = #{institution} and release_time = #{releaseTime}
    </select>

    <select id="getUserInfo" resultType="com.retrieval.pojo.User">
        SELECT * FROM `user` WHERE id = #{userId}
    </select>

    <update id="updatePassword">
        UPDATE `user` SET `password` = #{password} WHERE id = #{userId};
    </update>

    <update id="updateUpTime">
        UPDATE user
        SET up_time = CURRENT_TIMESTAMP + INTERVAL 1 YEAR
        WHERE id = #{userId}
    </update>

    <update id="updateVipsSucc">
        UPDATE vips SET is_pay = 2 WHERE wxpay_id = #{tradeNo}
    </update>

<!--    <update id="updateVips">-->
<!--        UPDATE vips SET is_pay = 2 WHERE user_id = #{userId}-->
<!--    </update>-->

    <select id="getOpenIdByToken" resultType="String">
        SELECT open_id FROM `user` WHERE token = #{token} LIMIT 1
    </select>

</mapper>

